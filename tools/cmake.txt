预定义变量:
	project_source_dir 									工程的根目录
	project_binary_dir 									运行cmake命令的目录,通常是${project_source_dir}/build
	cmake_include_path 									环境变量,非cmake变量
	cmake_library_path 									环境变量
	cmake_current_source_dir 							当前处理的cmakelists.txt所在的路径
	cmake_current_binary_dir 							target编译目录
	使用add_surdirectory(src bin)可以更改此变量的值
	set(executable_output_path <新路径>)并不会对此变量有影响,只是改变了最终目标文件的存储路径
	cmake_current_list_file 							输出调用这个变量的cmakelists.txt的完整路径
	cmake_current_list_line 							输出这个变量所在的行
	cmake_module_path 									定义自己的cmake模块所在的路径
	set(cmake_module_path ${project_source_dir}/cmake),然后可以用include命令来调用自己的模块
	executable_output_path 								重新定义目标二进制可执行文件的存放位置
	library_output_path 								重新定义目标链接库文件的存放位置
	project_name 										返回通过project指令定义的项目名称
	cmake_allow_loose_loop_constructs 					用来控制if else语句的书写方式
系统信息:
	cmake_major_version 								cmake主版本号,如2.8.6中的2
	cmake_minor_version 								cmake次版本号,如2.8.6中的8
	cmake_patch_version 								cmake补丁等级,如2.8.6中的6
	cmake_system 										系统名称,例如linux-2.6.22
	camke_system_name 									不包含版本的系统名,如linux
	cmake_system_version 								系统版本,如2.6.22
	cmake_system_processor 								处理器名称,如i686
	unix 												在所有的类unix平台为true,包括os x和cygwin
	win32 												在所有的win32平台为true,包括cygwin
开关选项:
	build_shared_libs 									控制默认的库编译方式 如果未进行设置,使用add_library时又没有指定库类型,默认编译生成的库都是静态库
	cmake_c_flags 										设置c编译选项
	cmake_cxx_flags 									设置c++编译选项

cmake变量使用${}方式取值,但是在if控制语句中是直接使用变量名
环境变量使用$env{}方式取值,使用set(env{var} value)赋值

指令(参数1 参数2…)
参数使用括弧括起,参数之间使用空格或分号分开

1)project 命令
命令语法:project(<projectname> [languagename1 languagename2 … ] )

命令简述:用于指定项目的名称

使用范例:project(main)


2)cmake_minimum_required命令
命令语法:cmake_minimum_required(version major[.minor[.patch[.tweak]]][fatal_error])

命令简述:用于指定需要的 cmake 的最低版本

使用范例:cmake_minimum_required(version 2.8)


3)aux_source_directory命令
命令语法:aux_source_directory(<dir> <variable>)

命令简述:用于将 dir 目录下的所有源文件的名字保存在变量 variable 中

使用范例:aux_source_directory(. dir_srcs)


4)add_executable 命令
命令语法:add_executable(<name> [win32] [macosx_bundle][exclude_from_all] source1 source2 … sourcen)

命令简述:用于指定从一组源文件 source1 source2 … sourcen 编译出一个可执行文件且命名为 name

使用范例:add_executable(main ${dir_srcs})


5)add_library 命令
命令语法:add_library([static | shared | module] [exclude_from_all] source1source2 … sourcen)

命令简述:用于指定从一组源文件 source1 source2 … sourcen 编译出一个库文件且命名为 name

使用范例:add_library(lib ${dir_srcs})


6)add_dependencies 命令
命令语法:add_dependencies(target-name depend-target1 depend-target2 …)

命令简述:用于指定某个目标(可执行文件或者库文件)依赖于其他的目标 这里的目标必须是 add_executable\add_library\add_custom_target 命令创建的目标


7)add_subdirectory 命令
命令语法:add_subdirectory(source_dir [binary_dir] [exclude_from_all])

命令简述:用于添加一个需要进行构建的子目录

使用范例:add_subdirectory(lib)


8)target_link_libraries命令
命令语法:target_link_libraries(<target> [item1 [item2 […]]][[debug|optimized|general] ] …)

命令简述:用于指定 target 需要链接 item1 item2 … 这里 target 必须已经被创建 链接的 item 可以是已经存在的 target(依赖关系会自动添加)

使用范例:target_link_libraries(main lib)


9)set 命令
命令语法:set(<variable> <value> [[cache <type><docstring> [force]] | parent_scope])

命令简述:用于设定变量 variable 的值为 value 如果指定了 cache 变量将被放入 cache(缓存)中 

使用范例:set(projectname main)


10)unset 命令
命令语法:unset(<variable> [cache])

命令简述:用于移除变量 variable 如果指定了 cache 变量将被从 cache 中移除 

使用范例:unset(var cache)


11)message 命令
命令语法:message([status|warning|author_warning|fatal_error|send_error] "message todisplay"…)

命令简述:用于输出信息

使用范例:message("hello world")


12)include_directories 命令
命令语法:include_directories([after|before] [system] dir1 dir2 …)

命令简述:用于设定目录 这些设定的目录将被编译器用来查找 include 文件

使用范例:include_directories(${project_source_dir}/lib)


13)find_path 命令
命令语法:find_path(<var> name1 [path1 path2 …])

命令简述:用于查找包含文件 name1 的路径 如果找到则将路径保存在 var 中(此路径为一个绝对路径) 如果没有找到则结果为 <var>-notfound 默认的情况下 var 会被保存在 cache 中 这时候我们需要清除 var 才可以进行下一次查询(使用 unset 命令) 

使用范例:

find_path(lua_include_path lua.h${lua_include_find_path})

if(not lua_include_path)

   message(send_error "header file lua.h not found")

endif()


14)find_library 命令
命令语法:find_library(<var> name1 [path1 path2 …])

命令简述:用于查找库文件 name1 的路径 如果找到则将路径保存在 var 中(此路径为一个绝对路径) 如果没有找到则结果为 <var>-notfound 一个类似的命令 link_directories 已经不太建议使用了


15)add_definitions 命令
命令语法:add_definitions(-dfoo -dbar …)

命令简述:用于添加编译器命令行标志(选项) 通常的情况下我们使用其来添加预处理器定义

使用范例:add_definitions(-d_unicode -dunicode)


16)execute_process 命令
命令语法:

execute_process(command <cmd1>[args1...]]
                  [command <cmd2>[args2...] [...]]
                  [working_directory<directory>]
                  [timeout <seconds>]
                  [result_variable<variable>]
                  [output_variable<variable>]
                  [error_variable<variable>]
                  [input_file <file>]
                  [output_file <file>]
                  [error_file <file>]
                  [output_quiet]
                  [error_quiet]
                  [output_strip_trailing_whitespace]
                  [error_strip_trailing_whitespace])

命令简述:用于执行一个或者多个外部命令 每一个命令的标准输出通过管道转为下一个命令的标准输入 working_directory 用于指定外部命令的工作目录 
	result_variable 用于指定一个变量保存外部命令执行的结果 这个结果可能是最后一个执行的外部命令的退出码或者是一个描述错误条件的字符串 
	output_variable 或者 error_variable 用于指定一个变量保存标准输出或者标准错误 output_quiet 或者 error_quiet 用于忽略标准输出和标准错误 

使用范例:execute_process(command ls)
