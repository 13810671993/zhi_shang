预定义变量:
	PROJECT_SOURCE_DIR 									工程的根目录
	PROJECT_BINARY_DIR 									运行cmake命令的目录,通常是${PROJECT_SOURCE_DIR}/build
	CMAKE_INCLUDE_PATH 									环境变量,非cmake变量
	CMAKE_LIBRARY_PATH 									环境变量
	CMAKE_CURRENT_SOURCE_DIR 							当前处理的CMakeLists.txt所在的路径
	CMAKE_CURRENT_BINARY_DIR 							target编译目录
	使用ADD_SURDIRECTORY(src bin)可以更改此变量的值
	SET(EXECUTABLE_OUTPUT_PATH <新路径>)并不会对此变量有影响,只是改变了最终目标文件的存储路径
	CMAKE_CURRENT_LIST_FILE 							输出调用这个变量的CMakeLists.txt的完整路径
	CMAKE_CURRENT_LIST_LINE 							输出这个变量所在的行
	CMAKE_MODULE_PATH 									定义自己的cmake模块所在的路径
	SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake),然后可以用INCLUDE命令来调用自己的模块
	EXECUTABLE_OUTPUT_PATH 								重新定义目标二进制可执行文件的存放位置
	LIBRARY_OUTPUT_PATH 								重新定义目标链接库文件的存放位置
	PROJECT_NAME 										返回通过PROJECT指令定义的项目名称
	CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS 					用来控制IF ELSE语句的书写方式
系统信息:
	CMAKE_MAJOR_VERSION 								cmake主版本号,如2.8.6中的2
	CMAKE_MINOR_VERSION 								cmake次版本号,如2.8.6中的8
	CMAKE_PATCH_VERSION 								cmake补丁等级,如2.8.6中的6
	CMAKE_SYSTEM 										系统名称,例如Linux-2.6.22
	CAMKE_SYSTEM_NAME 									不包含版本的系统名,如Linux
	CMAKE_SYSTEM_VERSION 								系统版本,如2.6.22
	CMAKE_SYSTEM_PROCESSOR 								处理器名称,如i686
	UNIX 												在所有的类UNIX平台为TRUE,包括OS X和cygwin
	WIN32 												在所有的win32平台为TRUE,包括cygwin
开关选项:
	BUILD_SHARED_LIBS 									控制默认的库编译方式 如果未进行设置,使用ADD_LIBRARY时又没有指定库类型,默认编译生成的库都是静态库
	CMAKE_C_FLAGS 										设置C编译选项
	CMAKE_CXX_FLAGS 									设置C++编译选项

cmake变量使用${}方式取值,但是在IF控制语句中是直接使用变量名
环境变量使用$ENV{}方式取值,使用SET(ENV{VAR} VALUE)赋值

指令(参数1 参数2…)
参数使用括弧括起,参数之间使用空格或分号分开

1)project 命令
命令语法:project(<projectname> [languageName1 languageName2 … ] )

命令简述:用于指定项目的名称

使用范例:project(Main)


2)cmake_minimum_required命令
命令语法:cmake_minimum_required(VERSION major[.minor[.patch[.tweak]]][FATAL_ERROR])

命令简述:用于指定需要的 CMake 的最低版本

使用范例:cmake_minimum_required(VERSION 2.8)


3)aux_source_directory命令
命令语法:aux_source_directory(<dir> <variable>)

命令简述:用于将 dir 目录下的所有源文件的名字保存在变量 variable 中

使用范例:aux_source_directory(. DIR_SRCS)


4)add_executable 命令
命令语法:add_executable(<name> [WIN32] [MACOSX_BUNDLE][EXCLUDE_FROM_ALL] source1 source2 … sourceN)

命令简述:用于指定从一组源文件 source1 source2 … sourceN 编译出一个可执行文件且命名为 name

使用范例:add_executable(Main ${DIR_SRCS})


5)add_library 命令
命令语法:add_library([STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] source1source2 … sourceN)

命令简述:用于指定从一组源文件 source1 source2 … sourceN 编译出一个库文件且命名为 name

使用范例:add_library(Lib ${DIR_SRCS})


6)add_dependencies 命令
命令语法:add_dependencies(target-name depend-target1 depend-target2 …)

命令简述:用于指定某个目标(可执行文件或者库文件)依赖于其他的目标 这里的目标必须是 add_executable\add_library\add_custom_target 命令创建的目标


7)add_subdirectory 命令
命令语法:add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL])

命令简述:用于添加一个需要进行构建的子目录

使用范例:add_subdirectory(Lib)


8)target_link_libraries命令
命令语法:target_link_libraries(<target> [item1 [item2 […]]][[debug|optimized|general] ] …)

命令简述:用于指定 target 需要链接 item1 item2 … 这里 target 必须已经被创建 链接的 item 可以是已经存在的 target(依赖关系会自动添加)

使用范例:target_link_libraries(Main Lib)


9)set 命令
命令语法:set(<variable> <value> [[CACHE <type><docstring> [FORCE]] | PARENT_SCOPE])

命令简述:用于设定变量 variable 的值为 value 如果指定了 CACHE 变量将被放入 Cache(缓存)中 

使用范例:set(ProjectName Main)


10)unset 命令
命令语法:unset(<variable> [CACHE])

命令简述:用于移除变量 variable 如果指定了 CACHE 变量将被从 Cache 中移除 

使用范例:unset(VAR CACHE)


11)message 命令
命令语法:message([STATUS|WARNING|AUTHOR_WARNING|FATAL_ERROR|SEND_ERROR] "message todisplay"…)

命令简述:用于输出信息

使用范例:message("Hello World")


12)include_directories 命令
命令语法:include_directories([AFTER|BEFORE] [SYSTEM] dir1 dir2 …)

命令简述:用于设定目录 这些设定的目录将被编译器用来查找 include 文件

使用范例:include_directories(${PROJECT_SOURCE_DIR}/lib)


13)find_path 命令
命令语法:find_path(<VAR> name1 [path1 path2 …])

命令简述:用于查找包含文件 name1 的路径 如果找到则将路径保存在 VAR 中(此路径为一个绝对路径) 如果没有找到则结果为 <VAR>-NOTFOUND 默认的情况下 VAR 会被保存在 Cache 中 这时候我们需要清除 VAR 才可以进行下一次查询(使用 unset 命令) 

使用范例:

find_path(LUA_INCLUDE_PATH lua.h${LUA_INCLUDE_FIND_PATH})

if(NOT LUA_INCLUDE_PATH)

   message(SEND_ERROR "Header file lua.h not found")

endif()


14)find_library 命令
命令语法:find_library(<VAR> name1 [path1 path2 …])

命令简述:用于查找库文件 name1 的路径 如果找到则将路径保存在 VAR 中(此路径为一个绝对路径) 如果没有找到则结果为 <VAR>-NOTFOUND 一个类似的命令 link_directories 已经不太建议使用了


15)add_definitions 命令
命令语法:add_definitions(-DFOO -DBAR …)

命令简述:用于添加编译器命令行标志(选项) 通常的情况下我们使用其来添加预处理器定义

使用范例:add_definitions(-D_UNICODE -DUNICODE)


16)execute_process 命令
命令语法:

execute_process(COMMAND <cmd1>[args1...]]
                  [COMMAND <cmd2>[args2...] [...]]
                  [WORKING_DIRECTORY<directory>]
                  [TIMEOUT <seconds>]
                  [RESULT_VARIABLE<variable>]
                  [OUTPUT_VARIABLE<variable>]
                  [ERROR_VARIABLE<variable>]
                  [INPUT_FILE <file>]
                  [OUTPUT_FILE <file>]
                  [ERROR_FILE <file>]
                  [OUTPUT_QUIET]
                  [ERROR_QUIET]
                  [OUTPUT_STRIP_TRAILING_WHITESPACE]
                  [ERROR_STRIP_TRAILING_WHITESPACE])

命令简述:用于执行一个或者多个外部命令 每一个命令的标准输出通过管道转为下一个命令的标准输入 WORKING_DIRECTORY 用于指定外部命令的工作目录 
	RESULT_VARIABLE 用于指定一个变量保存外部命令执行的结果 这个结果可能是最后一个执行的外部命令的退出码或者是一个描述错误条件的字符串 
	OUTPUT_VARIABLE 或者 ERROR_VARIABLE 用于指定一个变量保存标准输出或者标准错误 OUTPUT_QUIET 或者 ERROR_QUIET 用于忽略标准输出和标准错误 

使用范例:execute_process(COMMAND ls)